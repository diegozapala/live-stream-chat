c
messages.sort{|k,v| -1*(k<=>v) }.to_h
hash_group.sort{|k,v| -1*(k<=>v) }.to_h
messages.keys.sort
messages.keys.sort.count
messages.keys.sort
messages.count
messages
messages.keys.sort
messages.values.sort
messages
c
cc
c
current_user
c
messages.first.each{ |k,v| puts k}
messages.first.map{ |k,v| puts k}
messages.map{ |k,v| puts k}
m.map{ |k,v| puts k}
m.each{ |k,v| puts k}
m=messages.first
messages.first
messages.class
messages
messages.each{ |key, message| puts key }
messages.first.each{ |key, message| puts key }
messages.each{ |key, message| puts key }
messages
c
key_message
c
messages
c
messages.first
messages
@message
@messages
c
n
c
User.destroy_all
User.new
@messages.each{ |k,v| puts v}
@messages
@messages.each{ |k,v| puts k.split("_")[1]}
@messages.each{ |k,v| puts k.split("_")[0]}
@messages.each{ |k,v| puts k.split("_")[1]}
@messages.each{ |k,v| puts k.split("_")}
@messages.each{ |k,v| puts k}
@messages
@messages.first
@messages.first.user
@messages.user
@messages
c
params[:message]
message
c
date
c
date
c
params
c
user_2
user_1
subject.perform
c
subject.perform
c
subject.perform
c
subject.perform
subject
user_5
user_4
user_3
user_2
user_1
subject.perform
c
DailyAward.all
GenerateDailyAwardWorker.perform_async()
c
GenerateDailyAwardWorker.perform.sync()
GenerateDailyAwardWorker.perform()
GenerateDailyAwardWorker.perform
GenerateDailyAwardWorker
c
GenerateDailyAwardWorker.perform_sync()
DailyAward.all
GenerateDailyAwardWorker.perform_async()
DailyAward.all
c
chat.total_messages
chat.add_message(user: user, date: Time.now.strftime("%d-%m-%Y_%H:%M:%S"), message: "teste2")
chat.total_messages
chat.add_message(user: user, date: message_date, message: "teste")
chat.total_messages
c
chat.number_accesses
n
chat.number_accesses
chat.add_access(user: user, date: Time.now.strftime("%d-%m-%Y_%H:%M:%S"))
chat.number_accesses
chat.add_access(user: user_b, date: Time.now.strftime("%d-%m-%Y_%H:%M:%S"))
user_b
user
chat.number_accesses
chat.add_access(user: user, date: message_date)
chat.number_accesses
c
chat.key
Chat.keys
Cart.keys
chat.key
cat.key
cat
c
LiveStream.first
date
keys.select{ |k| k.split("_").include?(date) }
keys
c
chat.key.include?(key_date)
chat.key.include?(17-01-2017_02:35:09)
chat.key.include?("17-01-2017_02:35:09")
chat.key.include?("key_date")
chat.key.include?("17-01-2017_02:35:09")
chat.key.include?("17")
chat.key.include?(17)
key_date
chat.key
chat.keys
chat.key
chat
key_date
Chat.find_by_date(date: key_date)
c
cart.all_messages
c
cart.all_messages
Cart.all_messages
cart
c
redis_db.hkeys(key)("message_*")
redis_db.hkeys(key)
redis_db.hkeys("message_*")
redis_db.hkeys(key)
redis_db.hvals(key)
redis_db.hvals("message_*")
redis_db.vals("message_*")
redis_db.keys("message_*")
redis_db.keys("chat_*")
redis_db.hgetall(key).select{ |k,_| k.include?("message") }
